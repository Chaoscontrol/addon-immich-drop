name: sync-upstream

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 3 * * *" # nightly UTC

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine latest upstream tag (Nasogaa/immich-drop)
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          # Get most recent tag (includes pre-releases like v0.4.0-beta)
          TAG="$(curl -fsSL https://api.github.com/repos/Nasogaa/immich-drop/tags | jq -r '.[0].name')"
          if [ -z "${TAG}" ] || [ "${TAG}" = "null" ]; then
            echo "Failed to resolve upstream tag" >&2
            exit 1
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"

      - name: Read current add-on version
        id: current
        shell: bash
        run: |
          set -euo pipefail
          CUR="$(sed -n 's/^version:[[:space:]]*//p' immich-drop/config.yaml | head -n1 | tr -d '\r')"
          if [ -z "${CUR}" ]; then
            echo "Failed to read version from immich-drop/config.yaml" >&2
            exit 1
          fi
          # Base version without -X suffix (if present)
          BASE="$(echo "${CUR}" | sed -E 's/-[0-9]+$//')"
          echo "cur=${CUR}"   >> "$GITHUB_OUTPUT"
          echo "base=${BASE}" >> "$GITHUB_OUTPUT"

      - name: Update files if upstream tag changed
        id: update
        shell: bash
        env:
          NEW_TAG: ${{ steps.tag.outputs.tag }}
          BASE: ${{ steps.current.outputs.base }}
        run: |
          set -euo pipefail
          echo "Upstream tag: ${NEW_TAG}"
          echo "Current base: ${BASE}"
          CHANGED=0

          if [ "${NEW_TAG}" != "${BASE}" ]; then
            echo "Bumping version to ${NEW_TAG} and resetting -X suffix"
            # Update add-on version (replace entire value on the version key)
            sed -i -E "s|^(version:[[:space:]]*).*$|\1${NEW_TAG}|" immich-drop/config.yaml
            CHANGED=1
          fi

          # Ensure Dockerfile pins to the same upstream ref for reproducible builds
          if ! grep -q "ARG UPSTREAM_REF=${NEW_TAG}" immich-drop/Dockerfile ; then
            sed -i -E "s|^ARG UPSTREAM_REF=.*$|ARG UPSTREAM_REF=${NEW_TAG}|" immich-drop/Dockerfile
            CHANGED=1
          fi

          echo "changed=${CHANGED}" >> "$GITHUB_OUTPUT"

      - name: Commit and push changes
        if: steps.update.outputs.changed == '1'
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add immich-drop/config.yaml immich-drop/Dockerfile
          git commit -m "chore(sync): track upstream ${{ steps.tag.outputs.tag }} (pin UPSTREAM_REF)"
          git push