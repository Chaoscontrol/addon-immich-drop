name: sync-upstream

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 3 * * *" # nightly UTC

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine latest upstream tag (Nasogaa/immich-drop)
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          # Avoid GitHub REST API rate limits by using a shallow tag fetch
          WORKDIR="/tmp/immich-upstream"
          rm -rf "${WORKDIR}"
          git init -q "${WORKDIR}"
          cd "${WORKDIR}"
          git remote add origin https://github.com/Nasogaa/immich-drop.git
          # Fetch only tags, shallow
          git fetch --depth=1 --tags origin

          # Prefer newest by creation date; fall back to version sort
          TAG="$(git for-each-ref --sort=-creatordate --format='%(refname:short)' refs/tags | head -n1 || true)"
          if [ -z "${TAG}" ]; then
            TAG="$(git for-each-ref --sort=-version:refname --format='%(refname:short)' refs/tags | tail -n1 || true)"
          fi
          if [ -z "${TAG}" ] || [ "${TAG}" = "null" ]; then
            echo "Failed to resolve upstream tag" >&2
            exit 1
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"

      - name: Read current add-on version
        id: current
        shell: bash
        run: |
          set -euo pipefail
          CUR="$(sed -n 's/^version:[[:space:]]*//p' immich-drop/config.yaml | head -n1 | tr -d '\r')"
          if [ -z "${CUR}" ]; then
            echo "Failed to read version from immich-drop/config.yaml" >&2
            exit 1
          fi
          BASE="$(echo "${CUR}" | sed -E 's/-[0-9]+$//')"
          echo "cur=${CUR}"   >> "$GITHUB_OUTPUT"
          echo "base=${BASE}" >> "$GITHUB_OUTPUT"

      - name: Update files if upstream tag changed
        id: update
        shell: bash
        env:
          NEW_TAG: ${{ steps.tag.outputs.tag }}
          BASE: ${{ steps.current.outputs.base }}
        run: |
          set -euo pipefail
          echo "Upstream tag: ${NEW_TAG}"
          echo "Current base: ${BASE}"
          CHANGED=0

          if [ "${NEW_TAG}" != "${BASE}" ]; then
            echo "Bumping version to ${NEW_TAG} and resetting -X suffix"
            sed -i -E "s|^(version:[[:space:]]*).*$|\1${NEW_TAG}|" immich-drop/config.yaml
            CHANGED=1
          fi

          if ! grep -q "ARG UPSTREAM_REF=${NEW_TAG}" immich-drop/Dockerfile ; then
            sed -i -E "s|^ARG UPSTREAM_REF=.*$|ARG UPSTREAM_REF=${NEW_TAG}|" immich-drop/Dockerfile
            CHANGED=1
          fi

          echo "changed=${CHANGED}" >> "$GITHUB_OUTPUT"

      - name: Fetch upstream release notes for tag (robust)
        if: steps.update.outputs.changed == '1'
        id: rel
        shell: bash
        env:
          TAG: ${{ steps.tag.outputs.tag }}
          GH_TOKEN: ${{ github.token }}
          GH_API: ${{ github.api_url }}
        run: |
          set -euo pipefail
          mkdir -p /tmp
          SECTION="/tmp/changelog_section.md"

          # Try authenticated GitHub API first to avoid rate limits.
          URL="${GH_API:-https://api.github.com}/repos/Nasogaa/immich-drop/releases/tags/${TAG}"
          HTTP="$(curl -sS -H "authorization: Bearer ${GH_TOKEN}" -H "accept: application/vnd.github+json" -H "user-agent: gha-sync-upstream" -w "%{http_code}" -o /tmp/release.json "${URL}" || echo "000")"

          BODY=""
          PUBLISHED=""
          HTML="https://github.com/Nasogaa/immich-drop/releases/tags/${TAG}"

          if [ "${HTTP}" = "200" ]; then
            BODY="$(jq -r '.body // ""' /tmp/release.json)"
            PUBLISHED="$(jq -r '.published_at // ""' /tmp/release.json)"
            HTML="$(jq -r '.html_url // ""' /tmp/release.json)"
          else
            # Fallback to tag page without API body (still produce a file)
            BODY="No upstream release JSON was returned (HTTP ${HTTP}). See the release page for details."
          fi

          # Format date safely
          if [ -n "${PUBLISHED}" ] && date -u -d "${PUBLISHED}" +"%Y-%m-%d" >/dev/null 2>&1; then
            DATE_FMT="$(date -u -d "${PUBLISHED}" +"%Y-%m-%d")"
          else
            DATE_FMT="$(date -u +"%Y-%m-%d")"
          fi

          # Always create the section file so downstream steps never fail.
          {
            printf "## %s - %s\n\n" "${TAG}" "${DATE_FMT}"
            printf "Upstream release: %s\n\n" "${HTML}"
            if [ -n "${BODY}" ]; then
              printf "%s\n\n" "${BODY}"
            else
              printf "_No body provided by upstream release._\n\n"
            fi
          } > "${SECTION}"

          # Output the path for later steps
          echo "section=${SECTION}" >> "$GITHUB_OUTPUT"

      - name: Prepend CHANGELOG.md with upstream notes
        if: steps.update.outputs.changed == '1'
        shell: bash
        env:
          SECTION: ${{ steps.rel.outputs.section }}
        run: |
          set -euo pipefail
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> "${SECTION}"
          fi
          mv "${SECTION}" CHANGELOG.md

      - name: Commit and push changes
        if: steps.update.outputs.changed == '1'
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add immich-drop/config.yaml immich-drop/Dockerfile CHANGELOG.md
          git commit -m "chore(sync): track upstream ${{ steps.tag.outputs.tag }}; update CHANGELOG"
          git push

      - name: Create tag for release
        if: ${{ steps.update.outputs.changed == '1' && steps.tag.outputs.tag != '' && steps.tag.outputs.tag != 'null' }}
        shell: bash
        env:
          TAG: ${{ steps.tag.outputs.tag }}
        run: |
          set -euo pipefail
          if git ls-remote --tags origin "refs/tags/${TAG}" | grep -q "${TAG}"; then
            echo "Tag ${TAG} already exists, skipping"
          else
            git tag -a "${TAG}" -m "Immich Drop add-on ${TAG}"
            git push origin "${TAG}"
          fi

      - name: Publish GitHub Release
        if: ${{ steps.update.outputs.changed == '1' && steps.tag.outputs.tag != '' && steps.tag.outputs.tag != 'null' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Immich Drop add-on ${{ steps.tag.outputs.tag }}
          body_path: ${{ steps.rel.outputs.section }}
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.tag, 'beta') || contains(steps.tag.outputs.tag, 'rc') }}