name: addon-patch

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0         # get full history so git log/describe work correctly
          fetch-tags: true       # ensure tags are available for describe/log ranges

      - name: Ensure tags present (safety)
        shell: bash
        run: |
          set -euo pipefail
          # In case the checkout action didn't fetch all tags for some reason
          git fetch --tags --force || true

      - name: Read current version
        id: cur
        shell: bash
        run: |
          set -euo pipefail
          CUR="$(sed -n 's/^version:[[:space:]]*//p' immich-drop/config.yaml | head -n1 | tr -d '\r')"
          if [ -z "${CUR}" ]; then
            echo "Could not read version from immich-drop/config.yaml" >&2
            exit 1
          fi
          BASE="$(echo "${CUR}" | sed -E 's/-[0-9]+$//')"
          SUFFIX="$(echo "${CUR}" | sed -nE 's/.*-([0-9]+)$/\1/p')"
          if [ -z "${SUFFIX}" ]; then
            NEW="${BASE}-1"
          else
            NEXT=$((SUFFIX+1))
            NEW="${BASE}-${NEXT}"
          fi
          echo "cur=${CUR}"   >> "$GITHUB_OUTPUT"
          echo "base=${BASE}" >> "$GITHUB_OUTPUT"
          echo "new=${NEW}"   >> "$GITHUB_OUTPUT"

      - name: Apply new version and pin Dockerfile UPSTREAM_REF
        shell: bash
        env:
          NEW: ${{ steps.cur.outputs.new }}
          BASE: ${{ steps.cur.outputs.base }}
        run: |
          set -euo pipefail
          sed -i -E "s|^(version:[[:space:]]*).*$|\1${NEW}|" immich-drop/config.yaml
          # Keep Dockerfile pinned to base upstream ref (without -X)
          sed -i -E "s|^ARG UPSTREAM_REF=.*$|ARG UPSTREAM_REF=${BASE}|" immich-drop/Dockerfile

      - name: Commit and push
        shell: bash
        env:
          REASON: ${{ github.event.inputs.reason }}
          NEW: ${{ steps.cur.outputs.new }}
          BASE: ${{ steps.cur.outputs.base }}
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add immich-drop/config.yaml immich-drop/Dockerfile
          git commit -m "chore(addon): bump add-on patch version to ${NEW} (base ${BASE}) - ${REASON}"
          git push

      - name: Create tag for release
        shell: bash
        env:
          NEW: ${{ steps.cur.outputs.new }}
        run: |
          set -euo pipefail
          if git ls-remote --tags origin "refs/tags/${NEW}" | grep -q "${NEW}"; then
            echo "Tag ${NEW} already exists, skipping"
          else
            git tag -a "${NEW}" -m "Immich Drop add-on ${NEW}"
            git push origin "${NEW}"
          fi

      - name: Compose release notes
        id: rn
        shell: bash
        env:
          NEW: ${{ steps.cur.outputs.new }}
          BASE: ${{ steps.cur.outputs.base }}
          REASON: ${{ github.event.inputs.reason }}
        run: |
          set -euo pipefail
          {
            echo "Add-on patch release ${NEW} (base upstream ${BASE})"
            echo
          } > /tmp/release_notes.md

          # Append commit subjects since previous tag -> NEW (simple list)
          # Use full history and tags (checkout set fetch-depth:0/fetch-tags:true)
          PREV="$(git describe --tags --abbrev=0 "${NEW}^" 2>/dev/null || true)"
          if [ -n "${PREV}" ]; then
            {
              echo "Changes since ${PREV}:"
              # Include merge commitsâ€™ subjects too, but skip the tag creation noise by using the range
              git log --no-color --pretty=format:'- %s' "${PREV}..${NEW}" || true
              echo
            } >> /tmp/release_notes.md
          else
            # First run or no prior tag; list recent commits reachable from NEW (limited)
            {
              echo "Changes:"
              git log --no-color -n 50 --pretty=format:'- %s' "${NEW}" || true
              echo
            } >> /tmp/release_notes.md
          fi

          echo "path=/tmp/release_notes.md" >> "$GITHUB_OUTPUT"

      - name: Update HA changelog (create if missing and prepend)
        shell: bash
        env:
          NEW: ${{ steps.cur.outputs.new }}
          BASE: ${{ steps.cur.outputs.base }}
          REASON: ${{ github.event.inputs.reason }}
        run: |
          set -euo pipefail
          mkdir -p immich-drop /tmp
          TARGET="immich-drop/CHANGELOG.md"
          TMP="/tmp/changelog_section.md"
          DATE="$(date -u +%Y-%m-%d)"

          {
            echo "## ${NEW} - ${DATE}"
            echo
            echo "Add-on patch release (base upstream ${BASE})"
            if [ -n "${REASON}" ]; then
              echo
              echo "Reason: ${REASON}"
            fi
            echo
          } > "${TMP}"

          if [ -f /tmp/release_notes.md ]; then
            cat /tmp/release_notes.md >> "${TMP}"
            echo >> "${TMP}"
          fi

          if [ -f "${TARGET}" ]; then
            cat "${TARGET}" >> "${TMP}"
          fi

          mv "${TMP}" "${TARGET}"

      - name: Commit changelog
        shell: bash
        env:
          NEW: ${{ steps.cur.outputs.new }}
          BASE: ${{ steps.cur.outputs.base }}
          REASON: ${{ github.event.inputs.reason }}
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          TARGET="immich-drop/CHANGELOG.md"
          if [ ! -f "${TARGET}" ]; then
            # Defensive fallback to avoid pathspec error if previous step was skipped
            mkdir -p immich-drop
            DATE="$(date -u +%Y-%m-%d)"
            {
              echo "## ${NEW} - ${DATE}"
              echo
              echo "Add-on patch release (base upstream ${BASE})"
              if [ -n "${REASON}" ]; then
                echo
                echo "Reason: ${REASON}"
              fi
              echo
            } > "${TARGET}"
          fi

          # Only commit if file is new or changed
          if [ -z "$(git status --porcelain -- ${TARGET} || true)" ]; then
            echo "No changelog changes to commit"
            exit 0
          fi

          git add "${TARGET}"
          git commit -m "docs(changelog): add ${NEW}"
          git push

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.cur.outputs.new }}
          name: ${{ steps.cur.outputs.new }}
          body_path: ${{ steps.rn.outputs.path }}
          draft: false
          prerelease: false
          make_latest: true